{
	"info": {
		"_postman_id": "2cc76fc6-79ef-4b19-90e8-e264f089eb72",
		"name": "PZN_validate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18384012"
	},
	"item": [
		{
			"name": "Get rule by uuid: Visibility rule hide",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Create Rule: Check status code as 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(Object.keys(pm.response.json()).length).to.gte(1);",
							"});",
							"",
							"pm.test(\"Create Rule: Check Result has rule id\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"id\"); ",
							"    pm.environment.set(\"ProfilerRuleId\",jsonData.id);",
							"});",
							"",
							"pm.test(\"Create Rule: Check Result has title and its value\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"title\");   ",
							"    pm.expect(pm.response.json().title).to.equal(\"VisibilityRuleHide\");    ",
							"});",
							"",
							"pm.test(\"Create Rule: Check Result has ruleType as Visibility Rule  \", function () {",
							"    pm.expect(pm.response.json().ruleType).to.equal(\"Visibility Rule\");    ",
							"});",
							"",
							"pm.test(\"Create Rule: Check Result has parentId\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"parentId\");",
							"    pm.expect(pm.response.json().parentId).to.not.be.null; ",
							"});",
							"",
							"pm.test(\"Create Rule: Check Result has description\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"description\");  ",
							"    pm.expect(pm.response.json().description).to.equal(\"This is visibility rule to hide.\"); ",
							"});",
							"",
							"pm.test(\"Create Rule: Check Result has created\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"created\");",
							"    pm.expect(pm.response.json().created).not.to.be.null;",
							"});",
							"",
							"pm.test(\"Create Rule: Check Result has publishedOnDate\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"publishedOnDate\");",
							"    pm.expect(pm.response.json().publishedOnDate).not.to.be.null;",
							"});",
							"",
							"pm.test(\"Create Rule: Check Result has lastModified\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"lastModified\");",
							"    pm.expect(pm.response.json().lastModified).not.to.be.null;",
							"});",
							"",
							"pm.test(\"Create Rule: Check Result has lastModifier\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"lastModifier\");     ",
							"});",
							"",
							"pm.test(\"Create Rule: Check Result has contents data\", function () {",
							"    pm.expect(pm.response.json().contents).to.not.be.null;",
							"    pm.expect(pm.response.json().contents.visibility).to.equal(\"show\");",
							"    pm.expect(pm.response.json().contents.otherwise).to.equal(\"hide\");",
							"    pm.expect(pm.response.json().contents.caseInsensitive).to.equal(true); ",
							"});",
							"",
							" pm.test(\"Create Rule: Check contents has conditions data\", function () {",
							"    pm.expect(pm.response.json().contents.conditions).to.not.be.null;",
							"    pm.expect(pm.response.json().contents.conditions.and).to.not.be.null;",
							"    pm.expect(pm.response.json().contents.conditions.and.length).to.equal(4);",
							"    pm.expect(pm.response.json().contents.conditions.and[0].operator).to.equal(\"is\");",
							"    pm.expect(pm.response.json().contents.conditions.and[0].attributeName).to.not.be.null;",
							"    pm.expect(pm.response.json().contents.conditions.and[0].attributeType).to.not.be.null;",
							"    pm.expect(pm.response.json().contents.conditions.and[0].value).to.not.be.null;",
							" });"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var host = pm.environment.get(\"host\");",
							"var WpsContextRoot = pm.environment.get(\"WpsContextRoot\");",
							"var WpsDefaultHome = pm.environment.get(\"WpsDefaultHome\");",
							"var authUsername = pm.environment.get(\"authUsername\");",
							"var authPassword = pm.environment.get(\"authPassword\");",
							"",
							"var authURL = host+'/'+ WpsContextRoot +'/' + WpsDefaultHome + '/cxml/04_SD9ePMtCP1I800I_KydQvyHFUBADPmuQy?userid='+authUsername+'&password='+authPassword;",
							"",
							"pm.environment.set('pznInvalidRuleId', Math.floor(Math.random() * 10000000));",
							"",
							"var reqLoginSetting ={",
							"    url: authURL,",
							"    method: \"POST\",",
							"    header:{\"Content-Type\":\"application/json\"},",
							"    body: {",
							"    mode: 'application/json',",
							"    raw: JSON.stringify(",
							"        {",
							"        \tusername:pm.environment.get(\"authUsername\"),",
							"            password:pm.environment.get(\"authPassword\")",
							"        })",
							"  }",
							"}",
							"pm.sendRequest(reqLoginSetting, function (err, res) {",
							"    if(!err){",
							"        if(res.code === 200){",
							"            pm.test(\"Login Success\", function () {",
							"                pm.expect(res.code).to.eql(200);",
							"            });",
							"                ",
							"            var createRuleURL = host +'/'+ WpsContextRoot +'/mycontenthandler/pzn-rest/rules'; ",
							"            var reqSetting ={",
							"                url: createRuleURL,",
							"                method: \"GET\",",
							"            }",
							"            pm.sendRequest(reqSetting, function(err, res){",
							"                if(!err){",
							"                    pm.test(\"Fetched all rules\", function () {",
							"                        pm.expect(res.code).to.eql(200);",
							"                    });",
							"                    let rule = res.json().items.filter(rule => rule.title === 'VisibilityRuleHide');  ",
							"                    pm.environment.set(\"pznVisibilityRuleHideId\", rule[0].id);  ",
							"                }                ",
							"            })",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{host}}/{{WpsContextRoot}}/mycontenthandler/pzn-rest/rules/{{pznVisibilityRuleHideId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{WpsContextRoot}}",
						"mycontenthandler",
						"pzn-rest",
						"rules",
						"{{pznVisibilityRuleHideId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get rule by uuid: Select Action Rule",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"    pm.test(\"GET Rule: Check status code as 200\", function () {",
							"        pm.response.to.have.status(200);",
							"        pm.expect(Object.keys(pm.response.json()).length).to.gte(1);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check rule id is same as queried rule id \", function () {",
							"        pm.expect(pm.response.json().id).to.equal( pm.environment.get(\"pznSelectActionRuleId\"));   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has title and its value\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"title\");   ",
							"        pm.expect(pm.response.json().title).to.equal(\"SelectActionWebContent\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has ruleType as Select Action Rule  \", function () {",
							"        pm.expect(pm.response.json().ruleType).to.equal(\"Select Action\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has parentId\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"parentId\");",
							"        pm.expect(pm.response.json().parentId).to.not.be.null; ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has description\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"description\");  ",
							"        pm.expect(pm.response.json().description).to.equal(\"This is SelectAction Rule\"); ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has created\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"created\");   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has publishedOnDate\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"publishedOnDate\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModified\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModified\");      ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModifier\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModifier\");     ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has contents data\", function () {",
							"        const ruleContent = pm.response.json().contents",
							"        pm.expect(ruleContent).to.not.be.null;",
							"        pm.expect(ruleContent).to.have.property(\"select\");",
							"        pm.expect(ruleContent.conditions.and[0]).to.have.property(\"propertyType\");",
							"        pm.expect(ruleContent.conditions.and[0]).to.have.property(\"propertyName\");",
							"        pm.expect(ruleContent.conditions.and[0]).to.have.property(\"operator\");",
							"        pm.expect(ruleContent.conditions.and[0].value[0]).to.have.property(\"attributeName\");",
							"        pm.expect(ruleContent.conditions.and[0].value[0]).to.have.property(\"attributeType\");",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check contents has conditions data\", function () {",
							"        const ruleContent = pm.response.json()  ",
							"        pm.expect(ruleContent).to.not.be.null;",
							"        pm.expect(ruleContent).to.have.property(\"id\");",
							"        pm.expect(ruleContent).to.have.property(\"description\"); ",
							"        pm.expect(ruleContent).to.have.property(\"title\"); ",
							"        pm.expect(ruleContent).to.have.property(\"ruleType\"); ",
							"        pm.expect(ruleContent).to.have.property(\"contents\");",
							"        pm.expect(ruleContent).to.have.property(\"created\"); ",
							"        pm.expect(ruleContent).to.have.property(\"publishedOnDate\"); ",
							"        pm.expect(ruleContent).to.have.property(\"lastModified\"); ",
							"        pm.expect(ruleContent).to.have.property(\"lastModified\"); ",
							"        pm.expect(ruleContent).to.have.property(\"parentId\"); ",
							"        pm.expect(ruleContent).to.have.property(\"authors\");",
							"    });",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var host = pm.environment.get(\"host\");",
							"var WpsContextRoot = pm.environment.get(\"WpsContextRoot\");",
							"var WpsDefaultHome = pm.environment.get(\"WpsDefaultHome\");",
							"var authUsername = pm.environment.get(\"authUsername\");",
							"var authPassword = pm.environment.get(\"authPassword\");",
							"",
							"var authURL = host+'/'+ WpsContextRoot +'/' + WpsDefaultHome + '/cxml/04_SD9ePMtCP1I800I_KydQvyHFUBADPmuQy?userid='+authUsername+'&password='+authPassword;",
							"",
							"pm.environment.set('pznInvalidRuleId', Math.floor(Math.random() * 10000000));",
							"",
							"var reqLoginSetting ={",
							"    url: authURL,",
							"    method: \"POST\",",
							"    header:{\"Content-Type\":\"application/json\"},",
							"    body: {",
							"    mode: 'application/json',",
							"    raw: JSON.stringify(",
							"        {",
							"        \tusername:pm.environment.get(\"authUsername\"),",
							"            password:pm.environment.get(\"authPassword\")",
							"        })",
							"  }",
							"}",
							"pm.sendRequest(reqLoginSetting, function (err, res) {",
							"    if(!err){",
							"        if(res.code === 200){",
							"            pm.test(\"Login Success\", function () {",
							"                pm.expect(res.code).to.eql(200);",
							"            });",
							"                ",
							"            var createRuleURL = host +'/'+ WpsContextRoot +'/mycontenthandler/pzn-rest/rules'; ",
							"            var reqSetting ={",
							"                url: createRuleURL,",
							"                method: \"GET\",",
							"            }",
							"            pm.sendRequest(reqSetting, function(err, res){",
							"                if(!err){",
							"                    pm.test(\"Fetched all rules\", function () {",
							"                        pm.expect(res.code).to.eql(200);",
							"                    });",
							"                    let rule = res.json().items.filter(rule => rule.title === 'SelectActionWebContent');  ",
							"                    pm.environment.set(\"pznSelectActionRuleId\", rule[0].id);  ",
							"                }                ",
							"            })",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{host}}/{{WpsContextRoot}}/mycontenthandler/pzn-rest/rules/{{pznSelectActionRuleId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{WpsContextRoot}}",
						"mycontenthandler",
						"pzn-rest",
						"rules",
						"{{pznSelectActionRuleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get rule by uuid: Visibility rule show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"    pm.test(\"GET Rule: Check status code as 200\", function () {",
							"        pm.response.to.have.status(200);",
							"        pm.expect(Object.keys(pm.response.json()).length).to.gte(1);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check rule id is same as queried rule id \", function () {",
							"        pm.expect(pm.response.json().id).to.equal( pm.environment.get(\"pznVisibilityRuleShowId\"));   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has title and its value\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"title\");   ",
							"        pm.expect(pm.response.json().title).to.equal(\"VisibilityRuleShow\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has ruleType as Visibility Rule  \", function () {",
							"        pm.expect(pm.response.json().ruleType).to.equal(\"Visibility Rule\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has parentId\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"parentId\");",
							"        pm.expect(pm.response.json().parentId).to.not.be.null; ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has description\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"description\");   ",
							"        pm.expect(pm.response.json().description).to.equal(\"This is visibility rule to show.\"); ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has created\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"created\");   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has publishedOnDate\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"publishedOnDate\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModified\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModified\");      ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModifier\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModifier\");     ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has contents data\", function () {",
							"        pm.expect(pm.response.json().contents).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.visibility).to.equal(\"hide\");",
							"        pm.expect(pm.response.json().contents.otherwise).to.equal(\"show\");",
							"        pm.expect(pm.response.json().contents.caseInsensitive).to.equal(false);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check contents has conditions data\", function () {",
							"        pm.expect(pm.response.json().contents.conditions).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.conditions.and).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.conditions.and.length).to.equal(3);",
							"        pm.expect(pm.response.json().contents.conditions.and[2].or.length).to.equal(2);",
							"        pm.expect(pm.response.json().contents.conditions.and[2].or[1].operator).to.equal(\"is between\");",
							"        pm.expect(pm.response.json().contents.conditions.and[2].or[1].attributeName).to.equal(\"timestamp\");",
							"        pm.expect(pm.response.json().contents.conditions.and[2].or[1].attributeType).to.equal(\"Date\");",
							"        pm.expect(pm.response.json().contents.conditions.and[2].or[1].value[0]).to.equal(\"2021-11-29 11:29:00\");",
							"        pm.expect(pm.response.json().contents.conditions.and[2].or[1].value[1]).to.equal(\"2021-12-29 11:29:00\");",
							"    });",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var host = pm.environment.get(\"host\");",
							"var WpsContextRoot = pm.environment.get(\"WpsContextRoot\");",
							"var WpsDefaultHome = pm.environment.get(\"WpsDefaultHome\");",
							"var authUsername = pm.environment.get(\"authUsername\");",
							"var authPassword = pm.environment.get(\"authPassword\");",
							"",
							"var authURL = host+'/'+ WpsContextRoot +'/' + WpsDefaultHome + '/cxml/04_SD9ePMtCP1I800I_KydQvyHFUBADPmuQy?userid='+authUsername+'&password='+authPassword;",
							"",
							"pm.environment.set('pznInvalidRuleId', Math.floor(Math.random() * 10000000));",
							"",
							"var reqLoginSetting ={",
							"    url: authURL,",
							"    method: \"POST\",",
							"    header:{\"Content-Type\":\"application/json\"},",
							"    body: {",
							"    mode: 'application/json',",
							"    raw: JSON.stringify(",
							"        {",
							"        \tusername:pm.environment.get(\"authUsername\"),",
							"            password:pm.environment.get(\"authPassword\")",
							"        })",
							"  }",
							"}",
							"pm.sendRequest(reqLoginSetting, function (err, res) {",
							"    if(!err){",
							"        if(res.code === 200){",
							"            pm.test(\"Login Success\", function () {",
							"                pm.expect(res.code).to.eql(200);",
							"            });",
							"                ",
							"            var createRuleURL = host +'/'+ WpsContextRoot +'/mycontenthandler/pzn-rest/rules';",
							"            var reqSetting ={",
							"                url: createRuleURL,",
							"                method: \"GET\",",
							"            }",
							"            pm.sendRequest(reqSetting, function(err, res){",
							"                if(!err){",
							"                    pm.test(\"Fetched all rules\", function () {",
							"                        pm.expect(res.code).to.eql(200);",
							"                    });",
							"                    let rule = res.json().items.filter(rule => rule.title === 'VisibilityRuleShow');  ",
							"                    pm.environment.set(\"pznVisibilityRuleShowId\", rule[0].id);  ",
							"                }                ",
							"            })",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{WpsContextRoot}}/mycontenthandler/pzn-rest/rules/{{pznVisibilityRuleShowId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{WpsContextRoot}}",
						"mycontenthandler",
						"pzn-rest",
						"rules",
						"{{pznVisibilityRuleShowId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get rule by uuid: Profiler1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"    pm.test(\"GET Rule: Check status code as 200\", function () {",
							"        pm.response.to.have.status(200);",
							"        pm.expect(Object.keys(pm.response.json()).length).to.gte(1);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check rule id is same as queried rule id \", function () {",
							"        pm.expect(pm.response.json().id).to.equal( pm.environment.get(\"profiler1Id\"));   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has title and its value\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"title\");   ",
							"        pm.expect(pm.response.json().title).to.equal(\"Profiler1\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has ruleType as Profiler\", function () {",
							"        pm.expect(pm.response.json().ruleType).to.equal(\"Profiler\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has parentId\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"parentId\");",
							"        pm.expect(pm.response.json().parentId).to.not.be.null; ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has description\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"description\");   ",
							"        pm.expect(pm.response.json().description).to.equal(\"This is Profiler1 Rule.\"); ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has created\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"created\");   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has publishedOnDate\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"publishedOnDate\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModified\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModified\");      ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModifier\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModifier\");     ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has contents data\", function () {",
							"        pm.expect(pm.response.json().contents).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles.length).to.equal(2);",
							"        pm.expect(pm.response.json().contents.profiles[0].profileName).to.equal(\"ps003\");",
							"        pm.expect(pm.response.json().contents.profiles[1].profileName).to.equal(\"editor\");",
							"        pm.expect(pm.response.json().contents.caseInsensitive).to.equal(false);",
							"        pm.expect(pm.response.json().contents.otherwiseProfile).to.be.null;",
							"        pm.expect(pm.response.json().contents.stopFirstProfile).to.equal(false);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check contents has conditions data\", function () {",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and.length).to.equal(1);",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].operator).to.equal(\"is\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].attributeName).to.equal(\"date\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].attributeType).to.equal(\"Date\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].value[0]).to.equal(\"2021-12-29\");",
							"        pm.expect(pm.response.json().contents.profiles[1].conditions.and[0].attributeName).to.equal(\"givenName\");",
							"    });",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var host = pm.environment.get(\"host\");",
							"var WpsContextRoot = pm.environment.get(\"WpsContextRoot\");",
							"var WpsDefaultHome = pm.environment.get(\"WpsDefaultHome\");",
							"var authUsername = pm.environment.get(\"authUsername\");",
							"var authPassword = pm.environment.get(\"authPassword\");",
							"",
							"var authURL = host+'/'+ WpsContextRoot +'/' + WpsDefaultHome + '/cxml/04_SD9ePMtCP1I800I_KydQvyHFUBADPmuQy?userid='+authUsername+'&password='+authPassword;",
							"",
							"pm.environment.set('pznInvalidRuleId', Math.floor(Math.random() * 10000000));",
							"",
							"var reqLoginSetting ={",
							"    url: authURL,",
							"    method: \"POST\",",
							"    header:{\"Content-Type\":\"application/json\"},",
							"    body: {",
							"    mode: 'application/json',",
							"    raw: JSON.stringify(",
							"        {",
							"        \tusername:pm.environment.get(\"authUsername\"),",
							"            password:pm.environment.get(\"authPassword\")",
							"        })",
							"  }",
							"}",
							"pm.sendRequest(reqLoginSetting, function (err, res) {",
							"    if(!err){",
							"        if(res.code === 200){",
							"            pm.test(\"Login Success\", function () {",
							"                pm.expect(res.code).to.eql(200);",
							"            });",
							"                ",
							"            var createRuleURL = host +'/'+ WpsContextRoot +'/mycontenthandler/pzn-rest/rules';",
							"            var reqSetting ={",
							"                url: createRuleURL,",
							"                method: \"GET\",",
							"            }",
							"            pm.sendRequest(reqSetting, function(err, res){",
							"                if(!err){",
							"                    pm.test(\"Fetched all rules\", function () {",
							"                        pm.expect(res.code).to.eql(200);",
							"                    });",
							"                    let rule = res.json().items.filter(rule => rule.title === 'Profiler1');  ",
							"                    pm.environment.set(\"profiler1Id\", rule[0].id);  ",
							"                }                ",
							"            })",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{WpsContextRoot}}/mycontenthandler/pzn-rest/rules/{{profiler1Id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{WpsContextRoot}}",
						"mycontenthandler",
						"pzn-rest",
						"rules",
						"{{profiler1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get rule by uuid: Profiler2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"    pm.test(\"GET Rule: Check status code as 200\", function () {",
							"        pm.response.to.have.status(200);",
							"        pm.expect(Object.keys(pm.response.json()).length).to.gte(1);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has title and its value\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"title\");   ",
							"        pm.expect(pm.response.json().title).to.equal(\"Profiler2\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has ruleType as Profiler\", function () {",
							"        pm.expect(pm.response.json().ruleType).to.equal(\"Profiler\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has parentId\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"parentId\");",
							"        pm.expect(pm.response.json().parentId).to.not.be.null; ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has description\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"description\");   ",
							"        pm.expect(pm.response.json().description).to.equal(\"This is profiler2 rule.\"); ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has created\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"created\");   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has publishedOnDate\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"publishedOnDate\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModified\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModified\");      ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModifier\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModifier\");     ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has contents data  \", function () {",
							"        pm.expect(pm.response.json().contents).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles.length).to.equal(1);",
							"        pm.expect(pm.response.json().contents.profiles[0].profileName).to.equal(\"san\");",
							"        pm.expect(pm.response.json().contents.caseInsensitive).to.equal(true);",
							"        pm.expect(pm.response.json().contents.otherwiseProfile).to.equal(\"admin\");",
							"        pm.expect(pm.response.json().contents.stopFirstProfile).to.equal(true);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check contents has conditions data  \", function () {",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and.length).to.equal(6);",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[4].attributeName).to.equal(\"actionNames\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[5].arithmetic.arithmeticOperator).to.equal(\"+\");",
							"    });",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var host = pm.environment.get(\"host\");",
							"var WpsContextRoot = pm.environment.get(\"WpsContextRoot\");",
							"var WpsDefaultHome = pm.environment.get(\"WpsDefaultHome\");",
							"var authUsername = pm.environment.get(\"authUsername\");",
							"var authPassword = pm.environment.get(\"authPassword\");",
							"",
							"var authURL = host+'/'+ WpsContextRoot +'/' + WpsDefaultHome + '/cxml/04_SD9ePMtCP1I800I_KydQvyHFUBADPmuQy?userid='+authUsername+'&password='+authPassword;",
							"",
							"pm.environment.set('pznInvalidRuleId', Math.floor(Math.random() * 10000000));",
							"",
							"var reqLoginSetting ={",
							"    url: authURL,",
							"    method: \"POST\",",
							"    header:{\"Content-Type\":\"application/json\"},",
							"    body: {",
							"    mode: 'application/json',",
							"    raw: JSON.stringify(",
							"        {",
							"        \tusername:pm.environment.get(\"authUsername\"),",
							"            password:pm.environment.get(\"authPassword\")",
							"        })",
							"  }",
							"}",
							"pm.sendRequest(reqLoginSetting, function (err, res) {",
							"    if(!err){",
							"        if(res.code === 200){",
							"            pm.test(\"Login Success\", function () {",
							"                pm.expect(res.code).to.eql(200);",
							"            });",
							"                ",
							"            var createRuleURL = host +'/'+ WpsContextRoot +'/mycontenthandler/pzn-rest/rules';",
							"            var reqSetting ={",
							"                url: createRuleURL,",
							"                method: \"GET\",",
							"            }",
							"            pm.sendRequest(reqSetting, function(err, res){",
							"                if(!err){",
							"                    pm.test(\"Fetched all rules\", function () {",
							"                        pm.expect(res.code).to.eql(200);",
							"                    });",
							"                    let rule = res.json().items.filter(rule => rule.title === 'Profiler2');  ",
							"                    pm.environment.set(\"profiler2Id\", rule[0].id);  ",
							"                }                ",
							"            })",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{WpsContextRoot}}/mycontenthandler/pzn-rest/rules/{{profiler2Id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{WpsContextRoot}}",
						"mycontenthandler",
						"pzn-rest",
						"rules",
						"{{profiler2Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get rule by uuid: Profiler3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"    pm.test(\"GET Rule: Check status code as 200\", function () {",
							"        pm.response.to.have.status(200);",
							"        pm.expect(Object.keys(pm.response.json()).length).to.gte(1);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check rule id is same as queried rule id \", function () {",
							"        pm.expect(pm.response.json().id).to.equal( pm.environment.get(\"profiler3Id\"));   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has title and its value\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"title\");   ",
							"        pm.expect(pm.response.json().title).to.equal(\"Profiler3\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has ruleType as Profiler\", function () {",
							"        pm.expect(pm.response.json().ruleType).to.equal(\"Profiler\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has parentId\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"parentId\");",
							"        pm.expect(pm.response.json().parentId).to.not.be.null; ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has description\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"description\");   ",
							"        pm.expect(pm.response.json().description).to.equal(\"This is Profiler3 Rule.\"); ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has created\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"created\");   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has publishedOnDate\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"publishedOnDate\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModified\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModified\");      ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModifier\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModifier\");     ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has contents data and stopFirstProfile as false\", function () {",
							"        pm.expect(pm.response.json().contents).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles.length).to.equal(3);",
							"        pm.expect(pm.response.json().contents.stopFirstProfile).to.equal(false);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check contents has conditions data and 2 profiles has same condition\", function () {",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and.length).to.equal(1);",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].operator).to.equal(\"is not\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].attributeName).to.equal(\"date\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].attributeType).to.equal(\"Date\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].value[0]).to.equal(\"2021-11-29\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and.length).to.equal(1);",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].operator).to.equal(\"is not\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].attributeName).to.equal(\"date\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].attributeType).to.equal(\"Date\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].value[0]).to.equal(\"2021-11-29\");",
							"    });",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var host = pm.environment.get(\"host\");",
							"var WpsContextRoot = pm.environment.get(\"WpsContextRoot\");",
							"var WpsDefaultHome = pm.environment.get(\"WpsDefaultHome\");",
							"var authUsername = pm.environment.get(\"authUsername\");",
							"var authPassword = pm.environment.get(\"authPassword\");",
							"",
							"var authURL = host+'/'+ WpsContextRoot +'/' + WpsDefaultHome + '/cxml/04_SD9ePMtCP1I800I_KydQvyHFUBADPmuQy?userid='+authUsername+'&password='+authPassword;",
							"",
							"pm.environment.set('pznInvalidRuleId', Math.floor(Math.random() * 10000000));",
							"",
							"var reqLoginSetting ={",
							"    url: authURL,",
							"    method: \"POST\",",
							"    header:{\"Content-Type\":\"application/json\"},",
							"    body: {",
							"    mode: 'application/json',",
							"    raw: JSON.stringify(",
							"        {",
							"        \tusername:pm.environment.get(\"authUsername\"),",
							"            password:pm.environment.get(\"authPassword\")",
							"        })",
							"  }",
							"}",
							"pm.sendRequest(reqLoginSetting, function (err, res) {",
							"    if(!err){",
							"        if(res.code === 200){",
							"            pm.test(\"Login Success\", function () {",
							"                pm.expect(res.code).to.eql(200);",
							"            });",
							"                ",
							"            var createRuleURL = host +'/'+ WpsContextRoot +'/mycontenthandler/pzn-rest/rules';",
							"            var reqSetting ={",
							"                url: createRuleURL,",
							"                method: \"GET\",",
							"            }",
							"            pm.sendRequest(reqSetting, function(err, res){",
							"                if(!err){",
							"                    pm.test(\"Fetched all rules\", function () {",
							"                        pm.expect(res.code).to.eql(200);",
							"                    });",
							"                    let rule = res.json().items.filter(rule => rule.title === 'Profiler3');  ",
							"                    pm.environment.set(\"profiler3Id\", rule[0].id);  ",
							"                }                ",
							"            })",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{WpsContextRoot}}/mycontenthandler/pzn-rest/rules/{{profiler3Id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{WpsContextRoot}}",
						"mycontenthandler",
						"pzn-rest",
						"rules",
						"{{profiler3Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get rule by uuid: Profiler4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"    pm.test(\"GET Rule: Check status code as 200\", function () {",
							"        pm.response.to.have.status(200);",
							"        pm.expect(Object.keys(pm.response.json()).length).to.gte(1);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check rule id is same as queried rule id \", function () {",
							"        pm.expect(pm.response.json().id).to.equal( pm.environment.get(\"profiler4Id\"));   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has title and its value\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"title\");   ",
							"        pm.expect(pm.response.json().title).to.equal(\"Profiler4\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has ruleType as Profiler\", function () {",
							"        pm.expect(pm.response.json().ruleType).to.equal(\"Profiler\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has parentId\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"parentId\");",
							"        pm.expect(pm.response.json().parentId).to.not.be.null; ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has description\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"description\");   ",
							"        pm.expect(pm.response.json().description).to.equal(\"This is Profiler4 Rule.\"); ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has created\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"created\");   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has publishedOnDate\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"publishedOnDate\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModified\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModified\");      ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModifier\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModifier\");     ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has contents data and stopFirstProfile as true\", function () {",
							"        pm.expect(pm.response.json().contents).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles.length).to.equal(3);",
							"        pm.expect(pm.response.json().contents.stopFirstProfile).to.equal(true);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check contents has conditions data and 2 profiles has same condition\", function () {",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and.length).to.equal(1);",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].operator).to.equal(\"is not\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].attributeName).to.equal(\"date\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].attributeType).to.equal(\"Date\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].value[0]).to.equal(\"2021-11-29\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and.length).to.equal(1);",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].operator).to.equal(\"is not\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].attributeName).to.equal(\"date\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].attributeType).to.equal(\"Date\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].value[0]).to.equal(\"2021-11-29\");",
							"    });",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var host = pm.environment.get(\"host\");",
							"var WpsContextRoot = pm.environment.get(\"WpsContextRoot\");",
							"var WpsDefaultHome = pm.environment.get(\"WpsDefaultHome\");",
							"var authUsername = pm.environment.get(\"authUsername\");",
							"var authPassword = pm.environment.get(\"authPassword\");",
							"",
							"var authURL = host+'/'+ WpsContextRoot +'/' + WpsDefaultHome + '/cxml/04_SD9ePMtCP1I800I_KydQvyHFUBADPmuQy?userid='+authUsername+'&password='+authPassword;",
							"",
							"pm.environment.set('pznInvalidRuleId', Math.floor(Math.random() * 10000000));",
							"",
							"var reqLoginSetting ={",
							"    url: authURL,",
							"    method: \"POST\",",
							"    header:{\"Content-Type\":\"application/json\"},",
							"    body: {",
							"    mode: 'application/json',",
							"    raw: JSON.stringify(",
							"        {",
							"        \tusername:pm.environment.get(\"authUsername\"),",
							"            password:pm.environment.get(\"authPassword\")",
							"        })",
							"  }",
							"}",
							"pm.sendRequest(reqLoginSetting, function (err, res) {",
							"    if(!err){",
							"        if(res.code === 200){",
							"            pm.test(\"Login Success\", function () {",
							"                pm.expect(res.code).to.eql(200);",
							"            });",
							"                ",
							"            var createRuleURL = host +'/'+ WpsContextRoot +'/mycontenthandler/pzn-rest/rules';",
							"            var reqSetting ={",
							"                url: createRuleURL,",
							"                method: \"GET\",",
							"            }",
							"            pm.sendRequest(reqSetting, function(err, res){",
							"                if(!err){",
							"                    pm.test(\"Fetched all rules\", function () {",
							"                        pm.expect(res.code).to.eql(200);",
							"                    });",
							"                    let rule = res.json().items.filter(rule => rule.title === 'Profiler4');  ",
							"                    pm.environment.set(\"profiler4Id\", rule[0].id);  ",
							"                }                ",
							"            })",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{WpsContextRoot}}/mycontenthandler/pzn-rest/rules/{{profiler4Id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{WpsContextRoot}}",
						"mycontenthandler",
						"pzn-rest",
						"rules",
						"{{profiler4Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get rule by uuid: Profiler5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"    pm.test(\"GET Rule: Check status code as 200\", function () {",
							"        pm.response.to.have.status(200);",
							"        pm.expect(Object.keys(pm.response.json()).length).to.gte(1);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check rule id is same as queried rule id \", function () {",
							"        pm.expect(pm.response.json().id).to.equal( pm.environment.get(\"profiler5Id\"));   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has title and its value\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"title\");   ",
							"        pm.expect(pm.response.json().title).to.equal(\"Profiler5\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has ruleType as Profiler\", function () {",
							"        pm.expect(pm.response.json().ruleType).to.equal(\"Profiler\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has parentId\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"parentId\");",
							"        pm.expect(pm.response.json().parentId).to.not.be.null; ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has description\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"description\");   ",
							"        pm.expect(pm.response.json().description).to.equal(\"This is Profiler5 Rule.\"); ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has created\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"created\");   ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has publishedOnDate\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"publishedOnDate\");    ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModified\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModified\");      ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has lastModifier\", function () {",
							"        pm.expect(pm.response.json()).to.have.property(\"lastModifier\");     ",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check Result has contents data and stopFirstProfile as false\", function () {",
							"        pm.expect(pm.response.json().contents).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles.length).to.equal(3);",
							"        pm.expect(pm.response.json().contents.stopFirstProfile).to.equal(false);",
							"    });",
							"",
							"    pm.test(\"GET Rule: Check contents has conditions data and all profiles has unique conditions\", function () {",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and.length).to.equal(1);",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].operator).to.equal(\"is not\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].attributeName).to.equal(\"date\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].attributeType).to.equal(\"Date\");",
							"        pm.expect(pm.response.json().contents.profiles[0].conditions.and[0].value[0]).to.equal(\"2021-11-29\");",
							"        pm.expect(pm.response.json().contents.profiles[1].conditions).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[1].conditions.and).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[1].conditions.and.length).to.equal(1);",
							"        pm.expect(pm.response.json().contents.profiles[1].conditions.and[0].operator).to.equal(\"is\");",
							"        pm.expect(pm.response.json().contents.profiles[1].conditions.and[0].attributeName).to.equal(\"givenName\");",
							"        pm.expect(pm.response.json().contents.profiles[1].conditions.and[0].attributeType).to.equal(\"wpsUser\");",
							"        pm.expect(pm.response.json().contents.profiles[1].conditions.and[0].value[0]).to.equal(\"editor\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and).to.not.be.null;",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and.length).to.equal(1);",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].operator).to.equal(\"is\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].attributeName).to.equal(\"ReferralHost\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].attributeType).to.equal(\"Referrer\");",
							"        pm.expect(pm.response.json().contents.profiles[2].conditions.and[0].value[0]).to.equal(\"xyz\");",
							"    });",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var host = pm.environment.get(\"host\");",
							"var WpsContextRoot = pm.environment.get(\"WpsContextRoot\");",
							"var WpsDefaultHome = pm.environment.get(\"WpsDefaultHome\");",
							"var authUsername = pm.environment.get(\"authUsername\");",
							"var authPassword = pm.environment.get(\"authPassword\");",
							"",
							"var authURL = host+'/'+ WpsContextRoot +'/' + WpsDefaultHome + '/cxml/04_SD9ePMtCP1I800I_KydQvyHFUBADPmuQy?userid='+authUsername+'&password='+authPassword;",
							"",
							"pm.environment.set('pznInvalidRuleId', Math.floor(Math.random() * 10000000));",
							"",
							"var reqLoginSetting ={",
							"    url: authURL,",
							"    method: \"POST\",",
							"    header:{\"Content-Type\":\"application/json\"},",
							"    body: {",
							"    mode: 'application/json',",
							"    raw: JSON.stringify(",
							"        {",
							"        \tusername:pm.environment.get(\"authUsername\"),",
							"            password:pm.environment.get(\"authPassword\")",
							"        })",
							"  }",
							"}",
							"pm.sendRequest(reqLoginSetting, function (err, res) {",
							"    if(!err){",
							"        if(res.code === 200){",
							"            pm.test(\"Login Success\", function () {",
							"                pm.expect(res.code).to.eql(200);",
							"            });",
							"                ",
							"            var createRuleURL = host +'/'+ WpsContextRoot +'/mycontenthandler/pzn-rest/rules';",
							"            var reqSetting ={",
							"                url: createRuleURL,",
							"                method: \"GET\",",
							"            }",
							"            pm.sendRequest(reqSetting, function(err, res){",
							"                if(!err){",
							"                    pm.test(\"Fetched all rules\", function () {",
							"                        pm.expect(res.code).to.eql(200);",
							"                    });",
							"                    let rule = res.json().items.filter(rule => rule.title === 'Profiler5');  ",
							"                    pm.environment.set(\"profiler5Id\", rule[0].id);  ",
							"                }                ",
							"            })",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{WpsContextRoot}}/mycontenthandler/pzn-rest/rules/{{profiler5Id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{WpsContextRoot}}",
						"mycontenthandler",
						"pzn-rest",
						"rules",
						"{{profiler5Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Folders: Get root folder keeping parent Id null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var host = pm.environment.get(\"host\");",
							"var WpsContextRoot = pm.environment.get(\"WpsContextRoot\");",
							"var WpsDefaultHome = pm.environment.get(\"WpsDefaultHome\");",
							"var authUsername = pm.environment.get(\"authUsername\");",
							"var authPassword = pm.environment.get(\"authPassword\");",
							"",
							"var authURL = host+'/'+ WpsContextRoot +'/' + WpsDefaultHome + '/cxml/04_SD9ePMtCP1I800I_KydQvyHFUBADPmuQy?userid='+authUsername+'&password='+authPassword;",
							"",
							"var reqLoginSetting ={",
							"    url: authURL,",
							"    method: \"POST\",",
							"    header:{\"Content-Type\":\"application/json\"},",
							"    body: {",
							"    mode: 'application/json',",
							"    raw: JSON.stringify(",
							"        {",
							"        \tusername:pm.environment.get(\"authUsername\"),",
							"            password:pm.environment.get(\"authPassword\")",
							"        })",
							"  }",
							"}",
							"pm.sendRequest(reqLoginSetting, function (err, res) {",
							"    if(!err){",
							"        if(res.code === 200){",
							"            pm.test(\"Login Success\", function () {",
							"                pm.expect(res.code).to.eql(200);",
							"            });",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"    pm.test(\"GET All Folders: Check status code as 200\", function () {",
							"        pm.response.to.have.status(200);",
							"        pm.expect(Object.keys(pm.response.json()).length).to.gte(1);",
							"             ",
							"    });",
							"",
							"    pm.test(\"GET ALL Folders: Check Result has offset as zero\", function () {",
							"        pm.expect(pm.response.json().offset).to.equal(0);     ",
							"    });",
							"",
							"    pm.test(\"GET All Folders: Check Result has limit as 30\", function () {",
							"        pm.expect(pm.response.json().limit).to.equal(30);     ",
							"    });",
							"",
							"",
							"    pm.test(\"GET All Folders: Check total items count\", function () {",
							"       // Total count to be greater or equal to the folders created as part of this test + root folder.",
							"        pm.expect(pm.response.json().total).to.gte(1);   ",
							"    });",
							"",
							"    pm.test(\"GET All Folders: Check Items Length\", function () {",
							"        pm.expect(pm.response.json().items).to.not.be.null;  ",
							"        // Items length to be greater or equal to the folders created as part of this test + root folder.",
							"        pm.expect(pm.response.json().items.length).to.gte(1);",
							"    });",
							"",
							"    pm.test(\"GET All Folders: Check Result has root folder\", function () {",
							"        let rootFolder = pm.response.json().items.filter(folder => folder.folderType === 'Root Folder');  ",
							"        pm.expect(rootFolder).to.not.be.null;  ",
							"    });",
							"",
							"",
							"    pm.test(\"Read Folder: Check result has all required properties \", function () {",
							"         let rootFolder = pm.response.json().items.filter(folder => folder.folderType === 'Root Folder');",
							"",
							"    pm.expect(rootFolder[0]).to.have.property(\"id\");",
							"    pm.environment.set(\"rootFolderId\", rootFolder[0].id);",
							"    pm.expect(rootFolder[0]).to.have.property(\"folderType\"); ",
							"    pm.expect(rootFolder[0]).to.have.property(\"description\"); ",
							"    pm.expect(rootFolder[0]).to.have.property(\"title\"); ",
							"    pm.expect(rootFolder[0]).to.have.property(\"authors\"); ",
							"    pm.expect(rootFolder[0]).to.have.property(\"creator\"); ",
							"    pm.expect(rootFolder[0]).to.have.property(\"created\"); ",
							"    pm.expect(rootFolder[0]).to.have.property(\"lastModified\"); ",
							"    pm.expect(rootFolder[0]).to.have.property(\"lastModified\"); ",
							"    pm.expect(rootFolder[0]).to.have.property(\"parentId\"); ",
							"    pm.expect(rootFolder[0].authors).to.equal(\"\");    ",
							"    pm.expect(rootFolder[0].parentId).to.empty; ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{WpsContextRoot}}/mycontenthandler/pzn-rest/folders/?limit=30&offset=0",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{WpsContextRoot}}",
						"mycontenthandler",
						"pzn-rest",
						"folders",
						""
					],
					"query": [
						{
							"key": "limit",
							"value": "30"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		}
	]
}