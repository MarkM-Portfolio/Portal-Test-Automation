{
	"info": {
		"_postman_id": "4d277427-c1c4-4231-a481-d995e2ac1097",
		"name": "DAM_Validate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18384012"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.test(\"Check if statusCode returned 200\", function () {",
							"    pm.expect(jsonData.statusCode).to.eql(200);",
							"});",
							"pm.test(\"Check if message is string\", function () {",
							"    pm.expect(jsonData.message).to.be.a('string');",
							"});",
							"pm.test(\"Check if success message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Login successful\");",
							"});",
							"pm.test(\"Check if type of data and its key \", function () {",
							"    pm.expect(jsonData.data).to.be.an('object').that.has.all.keys('userId');",
							"}); ",
							"pm.test(\"Check if userId is not undefined\", function () {",
							"    pm.expect(jsonData.data.userId).not.eql(undefined);",
							"});",
							"pm.test(\"Check if userId is string\", function () {",
							"    pm.expect(jsonData.data.userId).to.be.a('string');",
							"});",
							"const cookie_string = postman.getResponseHeader('Set-Cookie');",
							"pm.environment.set(\"cookie\", cookie_string);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "{{cookie}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": {{username}},\n  \"password\": {{password}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ringApiEndPoint}}/{{ringApiBaseUrl}}/auth/login",
					"host": [
						"{{ringApiEndPoint}}"
					],
					"path": [
						"{{ringApiBaseUrl}}",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllCollections Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"// pm.environment.set(\"collectionId\", jsonData.contents[0].id);",
							"",
							"pm.test(\"Check for Status code 200\", function(){",
							"\t      pm.response.to.have.status(200);",
							"\t});",
							"",
							"pm.test(\"X-Powered-By is present in response headers\", function () {",
							"             pm.response.to.have.header(\"X-Powered-By\");",
							"});",
							"",
							"pm.test(\"Vary is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Vary\");",
							"});",
							"",
							"pm.test(\"Access-Control-Allow-Credentials is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Access-Control-Allow-Credentials\");        ",
							"});",
							"",
							"pm.test(\"Access-Control-Expose-Headers is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Access-Control-Expose-Headers\");         ",
							"});",
							"",
							"pm.test(\"Content-Type is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Content-Type\");",
							"  ",
							"}); ",
							"",
							"pm.test(\"Date is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Date\");",
							"  ",
							"});",
							"",
							"pm.test(\"Content-Length is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Content-Length\");",
							"  ",
							"});       ",
							"",
							"",
							"var schema = {",
							"",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"offset\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"limit\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"total\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"self\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"first\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"prev\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"next\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"contents\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"id\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"name\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"description\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userid\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"parentid\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"rootparentid\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"accessreferenceid\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"created\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"updated\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"self\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"total\": {",
							"              \"type\": \"object\",",
							"              \"properties\": {",
							"                \"images\": {",
							"                  \"type\": \"integer\"",
							"                },",
							"                \"documents\": {",
							"                  \"type\": \"integer\"",
							"                },",
							"                \"videos\": {",
							"                  \"type\": \"integer\"",
							"                },",
							"                \"collections\": {",
							"                  \"type\": \"integer\"",
							"                },",
							"                \"items\": {",
							"                  \"type\": \"integer\"",
							"                }",
							"              },",
							"              \"required\": [",
							"                \"images\",",
							"                \"documents\",",
							"                \"videos\",",
							"                \"collections\",",
							"                \"items\"",
							"              ]",
							"            },",
							"            \"thumbnails\": {",
							"              \"type\": \"array\",",
							"              \"items\": [",
							"                {",
							"                  \"type\": \"object\",",
							"                  \"properties\": {",
							"                    \"self\": {",
							"                      \"type\": \"string\"",
							"                    },",
							"                    \"mimeType\": {",
							"                      \"type\": \"string\"",
							"                    },",
							"                    \"mediaName\": {",
							"                      \"type\": \"string\"",
							"                    }",
							"                  },",
							"                  \"required\": [",
							"                    \"self\",",
							"                    \"mimeType\",",
							"                    \"mediaName\"",
							"                  ]",
							"                }",
							"              ]",
							"            },",
							"            \"editable\": {",
							"              \"type\": \"boolean\"",
							"            },",
							"            \"deletable\": {",
							"              \"type\": \"boolean\"",
							"            },",
							"            \"rootaccessreferenceid\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"id\",",
							"            \"name\",",
							"            \"description\",",
							"            \"userid\",",
							"            \"parentid\",",
							"            \"rootparentid\",",
							"            \"accessreferenceid\",",
							"            \"created\",",
							"            \"updated\",",
							"            \"self\",",
							"            \"total\",",
							"            \"thumbnails\",",
							"            \"editable\",",
							"            \"deletable\",",
							"            \"rootaccessreferenceid\"",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"offset\",",
							"    \"limit\",",
							"    \"total\",",
							"    \"self\",",
							"    \"first\",",
							"    \"prev\",",
							"    \"next\",",
							"    \"last\",",
							"    \"contents\"",
							"  ]",
							"}",
							"",
							"pm.test(\"Response Validation on GET request to retrieve the Digital Asset Management collections\", function () {",
							"    var result = tv4.validateMultiple(pm.response.json(), schema);",
							"    if(result.errors.length !== 0){",
							"      console.log('result:', result.errors);",
							"    }",
							"     pm.expect(result.valid).to.be.true;",
							"    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"type": "text",
						"value": "{{cookie}}"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{damHost}}/{{damBaseUrl}}/collections",
					"host": [
						"{{damHost}}"
					],
					"path": [
						"{{damBaseUrl}}",
						"collections"
					]
				}
			},
			"response": []
		},
		{
			"name": "getMediaItem Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"var totalcount = pm.environment.get(\"totalcount\");",
							"",
							"pm.test(\"Check for Status code 200\", function(){",
							"\t      pm.response.to.have.status(200);",
							"\t});",
							"",
							"pm.test(\"X-Powered-By is present in response headers\", function () {",
							"             pm.response.to.have.header(\"X-Powered-By\");",
							"});",
							"",
							"pm.test(\"Vary is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Vary\");",
							"});",
							"",
							"pm.test(\"Access-Control-Allow-Credentials is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Access-Control-Allow-Credentials\");        ",
							"});",
							"",
							"pm.test(\"Access-Control-Expose-Headers is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Access-Control-Expose-Headers\");         ",
							"});",
							"",
							"pm.test(\"Content-Type is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Content-Type\");",
							"  ",
							"}); ",
							"",
							"pm.test(\"Date is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Date\");",
							"  ",
							"});",
							"",
							"pm.test(\"Total count is equal to the number of media items\", function () {",
							"        pm.expect(jsonData.total).to.equal(totalcount);",
							"    });",
							"",
							"pm.test(\"Content-Length is present in response headers\", function () {",
							"             pm.response.to.have.header(\"Content-Length\");",
							"  ",
							"});",
							"",
							"var schema = {",
							"",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"offset\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"limit\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"total\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"self\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"first\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"prev\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"next\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"contents\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"id\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"created\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"updated\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"name\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"size\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"self\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"mediaType\": {",
							"              \"type\": \"object\",",
							"              \"properties\": {",
							"                \"mimeType\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"extensions\": {",
							"                  \"type\": \"array\",",
							"                  \"items\": [",
							"                    {",
							"                      \"type\": \"string\"",
							"                    },",
							"                    {",
							"                      \"type\": \"string\"",
							"                    }",
							"                  ]",
							"                }",
							"              },",
							"              \"required\": [",
							"                \"mimeType\",",
							"                \"extensions\"",
							"              ]",
							"            },",
							"            \"thumbnailUrl\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"binaryUrl\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"isFavorite\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"id\",",
							"            \"created\",",
							"            \"updated\",",
							"            \"name\",",
							"            \"userId\",",
							"            \"size\",",
							"            \"self\",",
							"            \"mediaType\",",
							"            \"thumbnailUrl\",",
							"            \"binaryUrl\",",
							"            \"isFavorite\",",
							"            \"metadata\"",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"offset\",",
							"    \"limit\",",
							"    \"total\",",
							"    \"self\",",
							"    \"first\",",
							"    \"prev\",",
							"    \"next\",",
							"    \"last\",",
							"    \"contents\"",
							"  ]",
							"}",
							"  ",
							"",
							"pm.test(\"Response Validation on GET request to retrieve media assets inside collection based\", function () {",
							"    var result = tv4.validateMultiple(pm.response.json(), schema);",
							"    if(result.errors.length !== 0){",
							"      console.log('result:', result.errors);",
							"    }",
							"     pm.expect(result.valid).to.be.true;",
							"    ",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"collectionId\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"type": "text",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{damHost}}/{{damBaseUrl}}/collections/{{collectionId}}/items",
					"host": [
						"{{damHost}}"
					],
					"path": [
						"{{damBaseUrl}}",
						"collections",
						"{{collectionId}}",
						"items"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}