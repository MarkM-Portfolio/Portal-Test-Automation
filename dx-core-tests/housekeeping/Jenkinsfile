/*
 ********************************************************************
 * Licensed Materials - Property of HCL                             *
 *                                                                  *
 * Copyright HCL Technologies Ltd. 2001, 2024. All Rights Reserved. *
 *                                                                  *
 * Note to US Government Users Restricted Rights:                   *
 *                                                                  *
 * Use, duplication or disclosure restricted by GSA ADP Schedule    *
 ********************************************************************
 */


/*
* This script removes all expired resources that have been created for dx-core tests
*/

pipeline { 
    
    agent {
        label 'test_bvt'    
    }

    options {
        timeout(time: 2, unit: 'HOURS')   // timeout on whole pipeline job
    }

    stages {

        /*
         *  Preparing terraform to run in the current workspace. Terraform abstracts the AWS access and handles resource lifecycles and deployments
         */
        stage('Prepare Terraform') {
            steps {
                sh """
                    curl -LJO https://releases.hashicorp.com/terraform/0.12.20/terraform_0.12.20_linux_amd64.zip
                    unzip terraform_0.12.20_linux_amd64.zip
                    chmod +x terraform
                    ./terraform --help
                """
            }
        }

        /*
         *  We use terraform to destroy old EC2 instances that have expired. For all instances that are expired, the terraform destroy command will be issued.
         */
        stage('Remove expired dx-update-cf EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-update-cf-oracle EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf-oracle/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf-oracle instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf-oracle*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-oracle-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Remove expired dx-rollback-cf EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-rollback-cf/terraform/ec2-launch") {
                            script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-rollback-cf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-rollback-cf*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-rollback-cf-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

         stage('Remove expired dx-update-non-default-cf EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-non-default-cf/terraform/ec2-launch") {
                            script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-non-default-cf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-update-non-default-cf*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-non-default-cf-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-rollback-non-default-cf EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-rollback-non-default-cf/terraform/ec2-launch") {
                            script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-rollback-non-default-cf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-rollback-non-default-cf*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-rollback-non-default-cf-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-rollback-cf-v95 EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-rollback-cf-v95/terraform/ec2-launch") {
                            script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-rollback-cf-v95 instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-rollback-cf-v95*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-rollback-cf-v95-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-cf-bvt EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-cf-bvt/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-cf-bvt*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-cf-bvt-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-cf-bvt-v95 EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-cf-bvt-v95/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-cf-bvt-v95*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-cf-bvt-v95-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-cf-art-tests EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-cf-art-tests/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-cf-art-tests*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-cf-art-tests-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-install-dxconnect EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-install-dxconnect/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-install-dxconnect instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-install-dxconnect*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-install-dxconnect-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-update-cf-v95 EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf-v95/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf-v95 instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf-v95*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-v95-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-full-frt-ctf EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-full-frt-ctf/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-full-frt-ctf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-full-frt-ctf*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-full-frt-ctf-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-other-ctf EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-other-ctf/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-other-ctf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-other-ctf*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-other-ctf-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-enable-url-locales EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-enable-url-locales/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-enable-url-locales instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-enable-url-locales*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-enable-url-locales-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-cf-wtf-1 EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-cf-wtf-1/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-cf-wtf-1 instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-cf-wtf-1*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-cf-wtf-1-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-cf-wtf-2 EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-cf-wtf-2/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-cf-wtf-2 instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-cf-wtf-2*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-cf-wtf-2-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-cf-wtf-3 EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-cf-wtf-3/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-cf-wtf-3 instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-cf-wtf-3*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-cf-wtf-3-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-cf-wtf-4 EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-cf-wtf-4/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-cf-wtf-4 instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-cf-wtf-4*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-cf-wtf-4-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-update-cf-mls EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf-mls/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf-mls instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf-mls*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-mls-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-install-v95 EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-install-v95/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-install-v95 instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-install-v95*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-install-v95-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-update-docker EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-docker/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-docker instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-update-docker*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-docker-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }        

        /*
         *  We use terraform to destroy old AMIs that have expired. For all instances that are expired, the terraform destroy command will be issued.
         */
        stage('Remove expired dx-update-cf AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-update-cf-oracle AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf-oracle/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf-oracle instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf-oracle*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-oracle-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-update-non-default-cf AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-non-default-cf/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-non-default-cf instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-update-non-default-cf*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-non-default-cf-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-install-dxconnect AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-install-dxconnect/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-install-dxconnect instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-install-dxconnect*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-install-dxconnect-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-enable-url-locales AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-enable-url-locales/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-enable-url-locales instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-enable-url-locales*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-enable-url-locales-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Remove expired dx-update-cf-v95 AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf-v95/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf-v95 instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf-v95*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-v95-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }     
    }

    post {
        cleanup {
            /* Cleanup workspace */
            dir("${workspace}") {
                deleteDir()
            }
        
            /* Cleanup workspace@tmp */
            dir("${workspace}@tmp") {
                deleteDir()
            }
        }
    }
}
