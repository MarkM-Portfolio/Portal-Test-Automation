/*
 ********************************************************************
 * Licensed Materials - Property of HCL                             *
 *                                                                  *
 * Copyright HCL Technologies Ltd. 2001, 2024. All Rights Reserved. *
 *                                                                  *
 * Note to US Government Users Restricted Rights:                   *
 *                                                                  *
 * Use, duplication or disclosure restricted by GSA ADP Schedule    *
 ********************************************************************
 */


/*
* This script removes all expired resources that have been created for dx-core tests
*/

pipeline { 
    
    agent {
        label 'test_bvt'    
    }

    options {
        timeout(time: 2, unit: 'HOURS')   // timeout on whole pipeline job
    }

    stages {

        /*
         *  Preparing terraform to run in the current workspace. Terraform abstracts the AWS access and handles resource lifecycles and deployments
         */
        stage('Prepare Terraform') {
            steps {
                sh """
                    curl -LJO https://releases.hashicorp.com/terraform/0.12.20/terraform_0.12.20_linux_amd64.zip
                    unzip terraform_0.12.20_linux_amd64.zip
                    chmod +x terraform
                    ./terraform --help
                """
            }
        }

        /*
         *  We use terraform to destroy old EC2 instances that have expired. For all instances that are expired, the terraform destroy command will be issued.
         */
        stage('Remove expired dx-cf-wtf-1-ps EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-cf-wtf-1-ps/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-cf-wtf-1-ps instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-cf-wtf-1-ps*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-cf-wtf-1-ps-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-update-cf-ora21c EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf-ora21c/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf-ora21c instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf-ora21c*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-ora21c-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-update-cluster EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cluster/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cluster instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cluster*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cluster-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-farm EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-farm/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-farm instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-farm*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-farm-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-install-remotesearch EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-cluster-onpremise/dx-install-remotesearch/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-install-remotesearch instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-install-remotesearch*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-install-remotesearch-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-update-cf-v95-master EC2 instances'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf-v95-master/terraform/ec2-launch") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-install-remotesearch instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-instances " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf-v95-master*'" + 
                                " --query 'Reservations[].Instances[].{Instance: InstanceId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value,baseImageName: Tags[?Key==`baseImageName`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "Instance ${it['Instance']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-v95-master-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform init
                                        TF_VAR_CF_AMI_ID=${it['baseImageName'][0]} ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }


        stage('Remove expired dx-install-v95 AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-install-v95/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-install-v95 instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-install-v95*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-install-v95-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        } 

        stage('Remove expired dx-update-cluster AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cluster/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cluster instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cluster*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cluster-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Remove expired dx-update-cf-ora21c AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf-ora21c/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf-ora21c instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf-ora21c*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-ora21c-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        } 

        stage('Remove expired dx-install-remotesearch AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-cluster-onpremise/dx-install-remotesearch/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-install-remotesearch instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-install-remotesearch*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-install-remotesearch-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        } 

        stage('Remove expired dx-update-cf-mls AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-core-tests/dx-update-cf-mls/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-update-cf-mls instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-update-cf-mls*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    echo "ImageId ${it['ImageId']} to be deleted!"
                                    // dynamically create a terraform config for the instance
                                    sh(script: """
                                        cp variables.tf variables.tf.def
                                        sed -i 's/dx-update-cf-mls-local/${it['Name'][0]}/g' variables.tf
                                        cat variables.tf
                                        ${workspace}/terraform init
                                        ${workspace}/terraform destroy -refresh=false -auto-approve
                                        cp variables.tf.def variables.tf
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        } 


        stage('Remove expired dx-binary-cf-v95 AMIs'){
            steps {
                withAWS(credentials: 'aws_credentials', region: 'us-east-1') {
                    dir("${workspace}/dx-cluster-onpremise/terraform/ami-creation") {
                        script {
                            def currentTime = System.currentTimeMillis()
                            // query for all dx-binary-cf-v95 instances, just return the tags Expires and Name
                            def awsResult = sh(script: "aws ec2 describe-images  " + 
                                "--filters 'Name=tag:Name, Values=dx-binary-cf-v95*'" + 
                                " --query 'Images[].{Image: ImageId,Expires: Tags[?Key==`expires`].Value,Name: Tags[?Key==`Name`].Value}'", 
                                returnStdout: true).trim()
                            awsResult = awsResult.replace("\n","")
                            def jsonAwsResult = readJSON text: awsResult
                            jsonAwsResult.each {
                                // for each instance that is expired, perform the destroy command
                                if(it['Expires'][0].toLong() < currentTime) {
                                    // Important: We are not deleting the AMI which are created from master. Master AMI name should be with specific pattern, i.e. dx-binary-cf-v95_CFXXX_XXXXX
                                    def isMasterImage = "${it['Name'][0]}" ==~ /^dx-binary-cf-v95_CF.*/
                                    if(isMasterImage == false) {
                                        echo "Image Name ${it['Name'][0]} to be deleted!"
                                        sh(script: """
                                            cp variables.tf variables.tf.def
                                            sed -i 's/dx-update-cf-v95-local/${it['Name'][0]}/g' variables.tf
                                            cat variables.tf
                                            ${workspace}/terraform init
                                            ${workspace}/terraform destroy -refresh=false -auto-approve
                                            cp variables.tf.def variables.tf
                                        """)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        cleanup {
            /* Cleanup workspace */
            dir("${workspace}") {
                deleteDir()
            }
        
            /* Cleanup workspace@tmp */
            dir("${workspace}@tmp") {
                deleteDir()
            }
        }
    }
}
