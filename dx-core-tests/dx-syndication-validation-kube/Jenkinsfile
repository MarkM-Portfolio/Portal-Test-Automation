/*
 ********************************************************************
 * Licensed Materials - Property of HCL                             *
 *                                                                  *
 * Copyright HCL Technologies Ltd. 2022. All Rights Reserved.       *
 *                                                                  *
 * Note to US Government Users Restricted Rights:                   *
 *                                                                  *
 * Use, duplication or disclosure restricted by GSA ADP Schedule    *
 ********************************************************************
 */

import java.text.SimpleDateFormat

/*
* Sets the default branch to pull for running the tests. If no branch is provided branch will be set to develop.
*/
if (!env.TARGET_BRANCH) {
    env.TARGET_BRANCH = 'develop'
}

pipeline {

    agent {
        label 'build_infra'
    }
    parameters {
      string(name: 'DEPLOYMENT_LEVEL', defaultValue: 'develop',description: 'Deploying latest images')
      string(name: 'SYSTEMA_NAMESPACE', defaultValue: 'syndication-validation-system-a',description: 'Name space of the system A instance')
      string(name: 'SYSTEMB_NAMESPACE', defaultValue: 'syndication-validation-system-b',description: 'Name space of the system B instance')
      booleanParam(name: 'THREE_WAY_SYNDICATION', defaultValue: true, description: 'Enable it to syndicate between three instances')
      string(name: 'SYSTEMC_NAMESPACE', defaultValue: 'syndication-validation-system-c',description: 'Name space of the system C instance')
      string(name: 'KUBE_FLAVOUR', defaultValue: 'native', description: 'Deploying a native kube environment.')
      string(name: 'KUBE_UNDEPLOY_JOB', defaultValue: 'CI/kube-deploy/native-kube-remove', description: 'Job which undeploys the environment',  trim: false)
      string(name: 'KUBE_DEPLOY_JOB', defaultValue: 'CI/kube-deploy/native-kube-next-deploy', description: 'Job which deploys the environment',  trim: false)
      choice(name: 'DEPLOYMENT_METHOD', choices: ['helm', 'dxctl'],  description: 'Select deployment method')
      string(name: 'CLUSTER_NAME', defaultValue: '', description: 'Cluster name where the deployment should be deployed to')
      string(name: 'CLUSTER_REGION', defaultValue: '', description: 'Region of the cluster')
      string(name: 'CONTEXT_ROOT_PATH', defaultValue: 'wps', description: 'Context root')
      string(name: 'DX_CORE_HOME_PATH', defaultValue: 'portal', description: 'Home path')
      string(name: 'PERSONALIZED_DX_CORE_PATH', defaultValue: 'myportal', description: 'Personalized path')
      string(name: 'DOMAIN_SUFFIX', defaultValue: '.team-q-dev.com', description: ' ')
      booleanParam(name: 'SSL_ENABLED', defaultValue: true, description: 'Required for testing environments with https/self-signed certificates like native.kube.')
      string(name: 'TOOL_PACKAGE_URL', defaultValue: 'https://artifactory.cwp.pnp-hcl.com/artifactory/quintana-generic-prod/dxclient-new/hcl-dxclient-image-v95_CF210_20230222-0049_rivendell_release_95_CF210.zip', description: 'URL from which to download dxclient zip',  trim: false)
      string(name: 'TOOL_CREDENTIALS_ID', defaultValue: 'artifactory', description: 'ID in Jenkins store to user name / password credentials needed to access tool package URL',  trim: false)
      string(name: 'DX_PROTOCOL', defaultValue: 'https', description: 'Protocol to connect to DX server',  trim: false)
      string(name: 'DX_PORT', defaultValue: '443', description: 'Port to connect to DX server (main profile)',  trim: false)
      string(name: 'USERNAME', defaultValue: 'wpsadmin', description: 'username of target',  trim: false)
      string(name: 'PASSWORD', defaultValue: 'wpsadmin', description: 'password of target',  trim: false)
    }

    stages {
        stage("Load modules and configuration") {
            steps {
                script {
                    commonModule = load "./autonomous-deployments/modules/common.gvy"
                    commonConfig = load "./autonomous-deployments/config/common.gvy"
                }
            }
        }

        stage('Prepare Settings') {
            steps {
                /*
                 * Assigning hostname using Performace-test-automation + the timestap
                 */
                dir("${workspace}/dx-core-tests/dx-syndication-validation-kube") {
                    script {
                        // determine build version and label current job accordingly
                        def dateFormat = new SimpleDateFormat("yyyyMMdd-HHmm")
                        def date = new Date()
                        env.SERVER_PROTOCOL = 'https://'
                        env.SYSTEMA_HOST = "${env.SYSTEMA_NAMESPACE}${DOMAIN_SUFFIX}"
                        env.SYSTEMB_HOST = "${env.SYSTEMB_NAMESPACE}${DOMAIN_SUFFIX}"
                        env.SYSTEMC_HOST = "${env.SYSTEMC_NAMESPACE}${DOMAIN_SUFFIX}"
                        env.SYSTEMA_WCM_REST="${SERVER_PROTOCOL}${env.SYSTEMA_NAMESPACE}${DOMAIN_SUFFIX}/${CONTEXT_ROOT_PATH}"
                        env.SYSTEMB_WCM_REST="${SERVER_PROTOCOL}${env.SYSTEMB_NAMESPACE}${DOMAIN_SUFFIX}/${CONTEXT_ROOT_PATH}"
                        env.SYSTEMC_WCM_REST="${SERVER_PROTOCOL}${env.SYSTEMC_NAMESPACE}${DOMAIN_SUFFIX}/${CONTEXT_ROOT_PATH}"
                        env.SYSTEMA_DAM_REST="${SERVER_PROTOCOL}${env.SYSTEMA_NAMESPACE}${DOMAIN_SUFFIX}"
                        env.SYSTEMB_DAM_REST="${SERVER_PROTOCOL}${env.SYSTEMB_NAMESPACE}${DOMAIN_SUFFIX}"
                        env.SYSTEMC_DAM_REST="${SERVER_PROTOCOL}${env.SYSTEMC_NAMESPACE}${DOMAIN_SUFFIX}"
                        env.SERVER_PORT = ''
                        env.SERVER_RINGAPI_PORT = ''
                        env.SERVER_DSAPI_PORT = ''
                        env.SERVER_IMAGEPATH = '/home/centos/data/ds/DSRegression/Dataset'
                        env.SERVER_CSVPATH = '/home/centos/data/ds/DSRegression/Dataset/ds_users.csv'
                        env.SERVER_DOCUMENTSPATH = '/home/centos/data/ds/DSRegression/Dataset/documents'
                        env.SERVER_IMAGESPATH = '/home/centos/data/ds/DSRegression/Dataset/images'
                        env.SERVER_VIDEOSPATH = '/home/centos/data/ds/DSRegression/Dataset/videos'
                        env.NEXT_JOB_DELAY_HOURS = '4'
                        env.NATIVE_POPO_SCHEDULE = 'EST-nightly-shutoff-at-1159pm'
                        if (!env.TARGET_JMX_FILE){
                            env.TARGET_JMX_FILE = 'Baseline-V2-SM-SitesandPages.jmx'
                        }
                      
                        echo "Assigning hostname + timestamp"
                        env.ENV_HOSTNAME = "dx_syndication_kube_validation_${dateFormat.format(date)}"
                        echo "New hostname will be: ${env.ENV_HOSTNAME}"

                        // Display name includes the ENV_HOSTNAME and a timestamp
                        currentBuild.displayName = "${env.ENV_HOSTNAME}"

                        // Defines the time to live in hours for all resources created (AMI, EC2 instances and DNS entries)
                        if (!env.RESOURCES_TTL){
                            env.RESOURCES_TTL = '10'
                        }
                        // Calculate expiration timestamp
                        def ttl_stamp = (System.currentTimeMillis() + (env.RESOURCES_TTL.toString().toInteger() * 60 * 60 * 1000))
                        env.TF_VAR_EXPIRATION_STAMP = ttl_stamp
                    }
                }

            }
        }

         /*
         *  Preparing terraform to run in the current workspace. Terraform abstracts the AWS access and handles resource lifecycles and deployments
         */
        stage('Prepare Terraform') {
            steps {
                sh """
                    curl -LJO https://releases.hashicorp.com/terraform/0.12.20/terraform_0.12.20_linux_amd64.zip
                    unzip terraform_0.12.20_linux_amd64.zip
                    chmod +x terraform
                    ./terraform --help
                """
            }
        }

        stage('Deploying the application in k8 environment for System A instance') {
            steps {
                script {
                    buildParams = []
                    buildParams = commonModule.createKubeParams(env.SYSTEMA_NAMESPACE, params.KUBE_FLAVOUR, params.CLUSTER_NAME, params.CLUSTER_REGION, "", params.CONTEXT_ROOT_PATH, params.DX_CORE_HOME_PATH, params.PERSONALIZED_DX_CORE_PATH, params.DEPLOYMENT_LEVEL, params.DEPLOYMENT_METHOD, params.DOMAIN_SUFFIX, "")
                    buildParams.add(string(name: 'NATIVE_POPO_SCHEDULE', value: env.NATIVE_POPO_SCHEDULE))
                    buildParams.add(string(name: 'NEXT_JOB_DELAY_HOURS', value: env.NEXT_JOB_DELAY_HOURS))
                    build(job: "${params.KUBE_DEPLOY_JOB}", 
                          parameters: buildParams, 
                          propagate: true,
                          wait: true)
                }
            }
        }

        stage('Deploying the application in k8 environment for System B instance') {
            steps {
                script {
                    buildParams = []
                    buildParams = commonModule.createKubeParams(env.SYSTEMB_NAMESPACE, params.KUBE_FLAVOUR, params.CLUSTER_NAME, params.CLUSTER_REGION, "", params.CONTEXT_ROOT_PATH, params.DX_CORE_HOME_PATH, params.PERSONALIZED_DX_CORE_PATH, params.DEPLOYMENT_LEVEL, params.DEPLOYMENT_METHOD, params.DOMAIN_SUFFIX, "")
                    buildParams.add(string(name: 'NATIVE_POPO_SCHEDULE', value: env.NATIVE_POPO_SCHEDULE))
                    buildParams.add(string(name: 'NEXT_JOB_DELAY_HOURS', value: env.NEXT_JOB_DELAY_HOURS))
                    build(job: "${params.KUBE_DEPLOY_JOB}", 
                          parameters: buildParams, 
                          propagate: true,
                          wait: true)
                    if (env.THREE_WAY_SYNDICATION != 'true') {
                        sleep 1800
                    }
                          
                }
            }
        }

        stage('Deploying the application in k8 environment for System C instance') {
            when {
                expression { return env.THREE_WAY_SYNDICATION == 'true' }
            }
            steps {
                script {
                    buildParams = []
                    buildParams = commonModule.createKubeParams(env.SYSTEMC_NAMESPACE, params.KUBE_FLAVOUR, params.CLUSTER_NAME, params.CLUSTER_REGION, "", params.CONTEXT_ROOT_PATH, params.DX_CORE_HOME_PATH, params.PERSONALIZED_DX_CORE_PATH, params.DEPLOYMENT_LEVEL, params.DEPLOYMENT_METHOD, params.DOMAIN_SUFFIX,"")
                    buildParams.add(string(name: 'NATIVE_POPO_SCHEDULE', value: env.NATIVE_POPO_SCHEDULE))
                    buildParams.add(string(name: 'NEXT_JOB_DELAY_HOURS', value: env.NEXT_JOB_DELAY_HOURS))
                    build(job: "${params.KUBE_DEPLOY_JOB}", 
                          parameters: buildParams, 
                          propagate: true,
                          wait: true)
                    sleep 1800      
                }
            }
        }

        stage('Import WCM libraries') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                        withCredentials([
                          [$class: 'UsernamePasswordMultiBinding', credentialsId: "${TOOL_CREDENTIALS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']
                        ]) {
                                sh "curl -s -u${USERNAME}:${PASSWORD} ${TOOL_PACKAGE_URL} --output dxclient.zip"
                                sh 'yes | unzip dxclient.zip'
                                sh 'ls'
                         }
                    }

                    dir("${WORKSPACE}/dxclient") {
                        sh """
                            echo Import WCM Library
                            docker load < dxclient.tar.gz
                            ./bin/dxclient -h
                            ./bin/dxclient wcm-library-import -hostname ${env.SYSTEMA_HOST} -dxConnectPort ${DX_PORT} -dxUsername ${USERNAME} -dxPassword ${PASSWORD} -dxConnectUsername ${USERNAME} -dxConnectPassword ${PASSWORD} -dxWASUsername ${USERNAME} -dxWASPassword ${PASSWORD} -dxProfileName wp_profile -libFilePath ${WORKSPACE}/dx-core-tests/dx-syndication-validation-kube/helpers/SyndicationLibraries.zip
                            ./bin/dxclient wcm-library-import -hostname ${env.SYSTEMA_HOST} -dxConnectPort ${DX_PORT} -dxUsername ${USERNAME} -dxPassword ${PASSWORD} -dxConnectUsername ${USERNAME} -dxConnectPassword ${PASSWORD} -dxWASUsername ${USERNAME} -dxWASPassword ${PASSWORD} -dxProfileName wp_profile -libFilePath ${WORKSPACE}/dx-core-tests/dx-syndication-validation-kube/helpers/SurfCityLibrary.zip
                        """
                    }
                }
            }
        }

        stage('Create WCM Libraries') {
            steps {
                  withCredentials([
                    usernamePassword(credentialsId: 'artifactory', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USER')
                  ]) {
                      configFileProvider([
                          configFile(fileId: 'test-automation-deployments', variable: 'DEPLOY_KEY')
                      ]) {
                          sh """
                            chmod 600 ${DEPLOY_KEY}
                            scp -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} ${workspace}/dx-core-tests/dx-syndication-validation-kube/scripts/create_library.sh centos@${env.SYSTEMA_HOST}:/tmp
                            ssh -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} centos@${env.SYSTEMA_HOST} 'cd /tmp && chmod +x /tmp/create_library.sh && sh /tmp/create_library.sh ${env.SYSTEMA_WCM_REST}'
                          """
                      } 
                }
            }
        }

        stage('Retrieve signer certificates for syndication') {
            steps {
                configFileProvider([
                    configFile(fileId: 'test-automation-deployments', variable: 'DEPLOY_KEY')
                ]) {
                    script {
                        dir("${workspace}/dx-core-tests/dx-syndication-validation-kube/scripts") {
                            sh """
                                chmod 600 ${DEPLOY_KEY}
                                scp -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} ${workspace}/dx-core-tests/dx-syndication-validation-kube/scripts/* centos@${env.SYSTEMA_HOST}:/tmp
                                scp -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} ${workspace}/dx-core-tests/dx-syndication-validation-kube/scripts/* centos@${env.SYSTEMB_HOST}:/tmp
                                ssh -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} centos@${env.SYSTEMA_HOST} 'chmod +x /tmp/retrieve_signer_certs.sh && sh /tmp/retrieve_signer_certs.sh ${env.SYSTEMB_HOST} ${env.SYSTEMB_NAMESPACE}'
                                ssh -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} centos@${env.SYSTEMB_HOST} 'chmod +x /tmp/retrieve_signer_certs.sh && sh /tmp/retrieve_signer_certs.sh ${env.SYSTEMA_HOST} ${env.SYSTEMA_NAMESPACE}'                                
                            """
                            if (env.THREE_WAY_SYNDICATION == 'true') {
                                sh """
                                    chmod 600 ${DEPLOY_KEY}
                                    scp -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} ${workspace}/dx-core-tests/dx-syndication-validation-kube/scripts/* centos@${env.SYSTEMC_HOST}:/tmp
                                    ssh -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} centos@${env.SYSTEMC_HOST} 'chmod +x /tmp/retrieve_signer_certs.sh && sh /tmp/retrieve_signer_certs.sh ${env.SYSTEMB_HOST} ${env.SYSTEMB_NAMESPACE}'                                
                                """
                            }
                        }
                    }
                }
            } 
        }

        stage('Create WCM syndication relation') {
            steps {
                script {
                    dir("${WORKSPACE}/dxclient") {
                            sh """
                                 ./bin/dxclient create-credential-vault -dxProtocol ${DX_PROTOCOL} -hostname ${env.SYSTEMB_HOST}  -dxPort ${DX_PORT} -dxUsername ${USERNAME} -dxPassword ${PASSWORD} -credentialSlotName syndication-slot -vaultUsername wpsadmin -vaultPassword wpsadmin
                                ./bin/dxclient create-syndication-relation -dxProtocol ${DX_PROTOCOL} -hostname ${env.SYSTEMB_HOST}  -dxPort ${DX_PORT} -dxUsername ${USERNAME} -dxPassword ${PASSWORD} -syndicatorUrl https://${env.SYSTEMA_HOST}/wps/wcm -syndicatorName syndicator1 -subscriberName subscriber1 -vaultSlotName syndication-slot -syndicationType ${env.SYNDICATE_ITEMS} -webContentLibraries "${env.SYNDICATE_LIBRARIES}" -subscriberURL https://${env.SYSTEMB_HOST}/wps/wcm/connect -syndicatorVaultSlotName syndication-slot
                            """

                            if (env.THREE_WAY_SYNDICATION == 'true') {
                                sleep 600
                                sh """
                                    ./bin/dxclient create-credential-vault -dxProtocol ${DX_PROTOCOL} -hostname ${env.SYSTEMC_HOST}  -dxPort ${DX_PORT} -dxUsername ${USERNAME} -dxPassword ${PASSWORD} -credentialSlotName syndication-slot -vaultUsername wpsadmin -vaultPassword wpsadmin
                                    ./bin/dxclient create-syndication-relation -dxProtocol ${DX_PROTOCOL} -hostname ${env.SYSTEMC_HOST}  -dxPort ${DX_PORT} -dxUsername ${USERNAME} -dxPassword ${PASSWORD} -syndicatorUrl https://${env.SYSTEMB_HOST}/wps/wcm -syndicatorName syndicator1 -subscriberName subscriber1 -vaultSlotName syndication-slot -syndicationType  ${env.SYNDICATE_ITEMS} -webContentLibraries "${env.SYNDICATE_LIBRARIES}" -subscriberURL https://${env.SYSTEMC_HOST}/wps/wcm/connect -syndicatorVaultSlotName syndication-slot
                                """
                            }
                    }
                }
            }
        }

        stage('Import DAM assests and Enable DAM Staging') {
            steps {
                script {
                    dir("${WORKSPACE}/dxclient") {
                            sh """
                                 unzip ${WORKSPACE}/dx-core-tests/dx-syndication-validation-kube/helpers/dam-export-assets.zip 
                                ./bin/dxclient manage-dam-assets import-assets -dxProtocol ${DX_PROTOCOL} -hostname ${env.SYSTEMA_HOST}  -dxPort ${DX_PORT} -dxUsername ${USERNAME} -dxPassword ${PASSWORD} -exportPath ${WORKSPACE}/dxclient/dam-export-assets
                            """
                            sleep 600
                            sh """
                                ./bin/dxclient manage-dam-staging register-dam-subscriber -dxProtocol ${DX_PROTOCOL} -hostname ${env.SYSTEMA_HOST}  -dxPort ${DX_PORT} -dxUsername ${USERNAME} -dxPassword ${PASSWORD} -targetHostname ${env.SYSTEMB_HOST}
                            """

                            if (env.THREE_WAY_SYNDICATION == 'true') {
                                sleep 600
                                sh """
                                    ./bin/dxclient manage-dam-staging register-dam-subscriber -dxProtocol ${DX_PROTOCOL} -hostname ${env.SYSTEMB_HOST}  -dxPort ${DX_PORT} -dxUsername ${USERNAME} -dxPassword ${PASSWORD} -targetHostname ${env.SYSTEMC_HOST}
                                """
                            }
                    }
                }
            }
        }

         stage('Execute Syndication Tests') {
             steps {
                configFileProvider([
                    configFile(fileId: 'test-automation-deployments', variable: 'DEPLOY_KEY')
                ]) {
                    script {
                        dir("${workspace}/dx-core-tests/dx-syndication-validation-kube/scripts") {
                            sh """
                                chmod 600 ${DEPLOY_KEY}
                                ssh -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} centos@${env.SYSTEMA_HOST} 'chmod +x /tmp/create_artifacts.sh && sh /tmp/create_artifacts.sh ${env.SYSTEMA_WCM_REST} ${env.SYSTEMB_WCM_REST}'
                                ssh -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} centos@${env.SYSTEMA_HOST} 'chmod +x /tmp/validate_syndication.sh && sh /tmp/validate_syndication.sh ${env.SYSTEMA_WCM_REST} ${env.SYSTEMB_WCM_REST} ${env.SYSTEMB_DAM_REST}'
                            """

                            if (env.THREE_WAY_SYNDICATION == 'true') {
                                sh """
                                    chmod 600 ${DEPLOY_KEY}
                                    ssh -o StrictHostKeyChecking=no -i ${DEPLOY_KEY} centos@${env.SYSTEMA_HOST} 'chmod +x /tmp/validate_syndication.sh && sh /tmp/validate_syndication.sh ${env.SYSTEMB_WCM_REST} ${env.SYSTEMC_WCM_REST} ${env.SYSTEMC_DAM_REST}'
                                """
                            }
                        }
                    }
                }
            } 
        }

            
        // stage('Undeploying the application in k8 environment for System A instance') {
        //      steps {
        //         script {
        //             buildParams = []
        //             buildParams.add(
        //                 [$class: 'StringParameterValue',
        //                     name: 'INSTANCE_NAME',
        //                     value: "${env.SYSTEMA_NAMESPACE}"])
        //             build(job: "${params.KUBE_UNDEPLOY_JOB}", 
        //                   parameters: buildParams, 
        //                   propagate: true,
        //                   wait: true)
        //         }
        //     }
        // }

        // stage('Undeploying the application in k8 environment for System B instance') {
        //      steps {
        //         script {
        //             buildParams = []
        //             buildParams.add(
        //                 [$class: 'StringParameterValue',
        //                     name: 'INSTANCE_NAME',
        //                     value: "${env.SYSTEMB_NAMESPACE}"])
        //             build(job: "${params.KUBE_UNDEPLOY_JOB}", 
        //                   parameters: buildParams, 
        //                   propagate: true,
        //                   wait: true)
        //         }
        //     }
        // }
    }

    post {
        
        cleanup {
            script {
                withCredentials([
                    usernamePassword(credentialsId: "aws_credentials", passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')
                ]) {
                    
                    /* Cleanup workspace */
                    dir("${workspace}") {
                        deleteDir()
                    }
                    
                    /* Cleanup workspace@tmp */
                    dir("${workspace}@tmp") {
                        deleteDir()
                    }
                }
            }
        }
    }
}
