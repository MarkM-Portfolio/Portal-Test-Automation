/*
 ********************************************************************
 * Licensed Materials - Property of HCL                             *
 *                                                                  *
 * Copyright HCL Technologies Ltd. 2001, 2024. All Rights Reserved. *
 *                                                                  *
 * Note to US Government Users Restricted Rights:                   *
 *                                                                  *
 * Use, duplication or disclosure restricted by GSA ADP Schedule    *
 ********************************************************************
 */


/*
* This script is the sucessor of "PortalUpdate-CF17-Jenkinsfile.groovy"
*/

import java.text.SimpleDateFormat

pipeline { 

    agent {
        label 'test_dxcore'    
    }

    stages {

        stage('Prepare settings and build-version') {
            steps {
                script {
                    // version prefix for the displayed build-version
                    if (!env.VERSION){
                        env.VERSION = 'dx-update-cf'
                    }
                    // teams URL for webhooks
                    if (!env.MS_TEAMS_URL){
                        env.MS_TEAMS_URL = 'https://outlook.office.com/webhook/8a6712b0-0629-4fbb-9e35-641ae6c7f577@189de737-c93a-4f5a-8b68-6f4ca9941912/JenkinsCI/a1fa77efc3b545a0aba82ab2bf0ddd4f/e012756a-5de7-490a-9a92-8b5b2c116578'
                    }
                    // DNS Hosted Zone inside AWS
                    if (!env.TF_VAR_HOSTED_ZONE){
                        env.TF_VAR_HOSTED_ZONE = '/hostedzone/Z3OEC7SLEHQ2P3'
                    }
                    // Defines the time to live in hours for all resources created (AMI, EC2 instances and DNS entries)
                    if (!env.RESOURCES_TTL){
                        env.RESOURCES_TTL = '24'
                    }
                    // Defines the CF Version to be deployed
                    if (!env.CF_VERSION){
                        env.CF_VERSION = 'CF196'
                    }
                    // Tika will be enabled by default.  If you want to run applyCF and also keep Stellent in place, set this param to true
                    if (!env.KEEP_STELLENT){
                        env.KEEP_STELLENT = 'false'
                    }

                    // determine build version and label current job accordingly
                    def dateFormat = new SimpleDateFormat("yyyyMMdd-HHmm")
                    def date = new Date()
                    // DXBuildNumber_NAME is being inherited by the upstream job that triggers this job
                    currentBuild.description = "${DXBuildNumber_NAME}"
                    env.TF_VAR_BUILD_LABEL = "${DXBuildNumber_NAME}"
                    // Description includes the version prefix and a timestamp
                    currentBuild.displayName = "${env.VERSION}_${dateFormat.format(date)}"
                    // Create variable for Terraform to determine current test run
                    env.TF_VAR_TEST_RUN_ID = "${env.VERSION}_${dateFormat.format(date)}"
                    //Create variable for javadoc build name
                    env.JAVADOC_BUILD = "${DXBuildNumber_NAME}_javadoc"

                    // Calculate expiration timestamp
                    def ttl_stamp = (System.currentTimeMillis() + (env.RESOURCES_TTL.toString().toInteger() * 60 * 60 * 1000))
                    env.TF_VAR_EXPIRATION_STAMP = ttl_stamp

                    echo "Running ${currentBuild.description} Job with the following settings."
                    echo "MS_TEAMS_URL: ${MS_TEAMS_URL}"
                    echo "TF_VAR_HOSTED_ZONE: ${TF_VAR_HOSTED_ZONE}"
                    echo "RESOURCES_TTL: ${RESOURCES_TTL}"
                    echo "All created resources will expire on: ${new Date(ttl_stamp)}"
                    echo "JavaDoc build name:  ${env.JAVADOC_BUILD}"
                }
            }
        }

        // Report Job start into configured Teams Channel
        stage('Report to Teams') {
            steps {
                script {
                    office365ConnectorSend message: "Starting ${currentBuild.displayName} ${env.VERSION}${env.formattedDate} commited by @${user} [View on Jenkins] ", status:"STARTED", webhookUrl: "${env.MS_TEAMS_URL}"
                }
            }
        }

        /*
         *  Preparing terraform to run in the current workspace. Terraform abstracts the AWS access and handles resource lifecycles and deployments
         */
        stage('Prepare Terraform') {
            steps {
                sh """
                    curl -LJO https://releases.hashicorp.com/terraform/0.12.20/terraform_0.12.20_linux_amd64.zip
                    unzip terraform_0.12.20_linux_amd64.zip
                    chmod +x terraform
                    ./terraform --help
                """
            }
        }

        /*
         *  We manage the lifecycle for this environment via Terraform. Each test-execution will use a dedicated backend key for state saving
         *  The housekeeping will pick up those states for destroying expired resources afterwards
         */
        stage('Create new EC2 Instance from 8.5/9.0 CF16 base AMI') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: "aws_credentials", passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID'),
                        sshUserPrivateKey(credentialsId: "dx-core-tests-base-image-key", keyFileVariable: 'connectKey')
                    ]) {
                        dir("${workspace}/dx-core-tests/dx-update-cf/terraform/ec2-launch") {
                            // replace placeholder in the variables.tf to fit the current test-run
                            sh(script: """
                                sed -i 's/dx-update-cf-local/${env.TF_VAR_TEST_RUN_ID}/g' variables.tf
                                ${workspace}/terraform init
                                ${workspace}/terraform apply -auto-approve
                            """)
                            def instanceInformation = sh(script: """
                                ${workspace}/terraform show -json
                            """, returnStdout: true).trim()
                            def instanceJsonInformation = readJSON text: instanceInformation
                            // extract private ip, dns and id of created instance
                            def instanceIp = instanceJsonInformation['values']['root_module']['resources'][0]['values']['private_ip']
                            def instanceDns = instanceJsonInformation['values']['root_module']['resources'][0]['values']['private_dns']
                            def instanceId = instanceJsonInformation['values']['root_module']['resources'][0]['values']['id']
                            echo "Instance ${instanceId} running on ${instanceIp}."
                            // test connect to environment via ssh
                            sh(script: """
                                target=${instanceIp}
                                n=0
                                while ! ssh -o StrictHostKeyChecking=no -i ${connectKey} root@\$target
                                do
                                    echo "Machine ssh not available. Retrying in 10s."
                                    sleep 10
                                    n=\$(( n+1 ))
                                    if [ \$n -eq 20 ]; then
                                        echo "Machine failed to run within alotted time"
                                        exit 1
                                    fi
                                done
                            """)
                            // set instanceIp, instanceDns and instanceId as variable for later use
                            env.INSTANCE_IP = instanceIp
                            env.INSTANCE_DNS = instanceDns
                            env.INSTANCE_ID = instanceId

                        }
                    }
                }
            }
        }

        /*
         *  Perform the CF installation on the remote machine
         */
        stage('Set correct host on EC2 machine and deploy CF') {
            steps {
                withCredentials([
                    sshUserPrivateKey(credentialsId: "dx-core-tests-base-image-key", keyFileVariable: 'connectKey'),
                    usernamePassword(credentialsId: "old_ftp_credentials", passwordVariable: 'FTP_PASSWORD', usernameVariable: 'FTP_USER')
                ]) {
                    script{
                        dir("${workspace}/dx-core-tests/scripts") {
                            sh """
                                scp -i ${connectKey} -o StrictHostKeyChecking=no -r change-host-ip.sh root@${env.INSTANCE_IP}:/change-host-ip.sh
                                scp -i ${connectKey} -o StrictHostKeyChecking=no -r portal-update-cf.sh root@${env.INSTANCE_IP}:/portal-update-cf.sh
                                scp -i ${connectKey} -o StrictHostKeyChecking=no -r validate-tika-enabled.sh root@${env.INSTANCE_IP}:/validate-tika-enabled.sh
                                """

                                if (env.KEEP_STELLENT == 'true') {
                                    sh """
                                        ssh -o StrictHostKeyChecking=no -i ${connectKey} root@${env.INSTANCE_IP} 'sed -i "s/applyCF.sh/applyCF.sh -DkeepStellentDCS=true/g" /portal-update-cf.sh'
                                    """
                                }

                            sh """
                                sh run-portal-cf-update.sh root ${env.INSTANCE_IP} ${env.INSTANCE_DNS} ${G_AWS_SHARE_FTP_HOST} ${FTP_USER} ${FTP_PASSWORD} ${CF_VERSION} ${TF_VAR_BUILD_LABEL} ${connectKey}
                                ssh -o StrictHostKeyChecking=no -i ${connectKey} root@${env.INSTANCE_IP} 'sh /validate-tika-enabled.sh /opt/IBM/WebSphere/wp_profile'
                            """
                        }
                    }
                }
            }
        }

        /*
         *  Zip up javadoc and upload to artifactory
         */
        stage('Zip up javadoc and upload to artifactory') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(credentialsId: "dx-core-tests-base-image-key", keyFileVariable: 'connectKey'),
                        usernamePassword(credentialsId: 'artifactory', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USER')
                    ]) {
                        dir("${workspace}/dx-core-tests/scripts") {
                            sh(script: """
                                ssh -o StrictHostKeyChecking=no -i ${connectKey} root@${env.INSTANCE_IP} 'cd /opt/IBM/WebSphere/PortalServer/doc && tar -cvzf ${env.JAVADOC_BUILD}.tgz Javadoc/ && curl -u\"${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}\" -T ${env.JAVADOC_BUILD}.tgz https://${G_ARTIFACTORY_HOST}/artifactory/${G_ARTIFACTORY_GENERIC_NAME}/dx-build-output/doc-input/${env.JAVADOC_BUILD}.tgz'
                            """)
                        }
                    }
                }
            }
        }

        /*
         *  This stage creates an AMI of the updated EC2 instance via terraform
         */
        stage('Create new AMI image for testing.') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: "aws_credentials", passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID'),
                    ]) {
                        dir("${workspace}/dx-core-tests/dx-update-cf/terraform/ami-creation") {
                            env.TF_VAR_TEST_EC2_ID = env.INSTANCE_ID
                            // replace placeholder in the variables.tf to fit the current test-run
                            sh(script: """
                                sed -i 's/dx-update-cf-local/${env.TF_VAR_TEST_RUN_ID}/g' variables.tf
                                ${workspace}/terraform init
                                ${workspace}/terraform apply -auto-approve
                            """)
                        }
                    }
                }
            }
        }
    }  

    post {
        aborted {
            script {
                office365ConnectorSend message: "Aborted ${env.JOB_NAME} commited by @${user} [View on Jenkins] ", status: "Aborted", webhookUrl: "${env.MS_TEAMS_URL}"
            }
        }
        
        failure {
            script {
                office365ConnectorSend message: "Build Failed ${env.JOB_NAME} commited by @${user} [View on Jenkins] ", status: "Build Failed", webhookUrl: "${env.MS_TEAMS_URL}"
            }
        }
        
        success {
            script {
                office365ConnectorSend message: "Build Success ${env.JOB_NAME} commited by @${user} [View on Jenkins] ", status: "Build Success", webhookUrl: "${env.MS_TEAMS_URL}"
            }
        }

        cleanup {
            /* Cleanup workspace */
            dir("${workspace}") {
                deleteDir()
            }
        
            /* Cleanup workspace@tmp */
            dir("${workspace}@tmp") {
                deleteDir()
            }
        }
    }

}
