/*
 ********************************************************************
 * Licensed Materials - Property of HCL                             *
 *                                                                  *
 * Copyright HCL Technologies Ltd. 2022. All Rights Reserved.       *
 *                                                                  *
 * Note to US Government Users Restricted Rights:                   *
 *                                                                  *
 * Use, duplication or disclosure restricted by GSA ADP Schedule    *
 ********************************************************************
 */

// Import the shared library with the name configured in Jenkins
@Library("dx-shared-library") _

/* Common paths - must be here always */
moduleDirectory = "./kube/lifecycle/modules"
configDirectory = "./kube/lifecycle/config"

pipeline {
    agent {
        label 'build_infra'
    }

    stages {
        /*
         * Load modules and configuration from the different flavours using "load"
         */
        stage("Load modules and configuration") {
            steps {
                script {
                    commonModule = load "${moduleDirectory}/common.gvy"
                    yamlFilePath =  "${workspace}/dx-master-packaging/master-packaging.yaml"
                }
            }
        }

        /*
         * Get latest images using filter
         */
        stage("Get latest images using filter") {
            steps {
                script {
                    masterImageTags = commonModule.determineImageTags();
                    CF_VERSION = masterImageTags.CORE_IMAGE_TAG.split("_rivendell_master")[0]
                    masterBuildDate = commonModule.getCoreImageBuildDate(masterImageTags.CORE_IMAGE_TAG)
                }
            }
        }
        stage('Update image tags in YAML file') {
            steps {
                script {
                    masterImageTags.each { imageTag ->
                        echo "${imageTag.key}: ${imageTag.value}"
                        def value = imageTag.value
                        if (value.contains("doesn't exist"))
                            value = "NA"
                        sh """
                            sed -i 's/${imageTag.key}/${value}/g' ${yamlFilePath}
                        """
                    }
                    sh """
                        sed -i 's/CF000_TIMESTAMP/${CF_VERSION}/g' ${yamlFilePath}
                        cat ${yamlFilePath}
                    """ 
                }    
            }
        }
        stage('Upload master packaging list manifest to artifactory'){
            steps {
                withCredentials([[
                    $class: 'UsernamePasswordMultiBinding', 
                    credentialsId: "artifactory",
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                ]]) {
                    script {
                        sh "curl -s -u\"${USERNAME}:${PASSWORD}\" -T ${yamlFilePath} https://${G_ARTIFACTORY_HOST}/artifactory/${G_ARTIFACTORY_GENERIC_NAME}/master-packaging-manifest/master-packaging_${CF_VERSION}.yaml"
                    }
                }   
            }
        }
    }

    post {
        cleanup {
            dxWorkspaceDirectoriesCleanup()
        }
    }
}
