# ********************************************************************
# * Licensed Materials - Property of HCL                             *
# *                                                                  *
# * Copyright HCL Technologies Ltd. 2022. All Rights Reserved.       *
# *                                                                  *
# * Note to US Government Users Restricted Rights:                   *
# *                                                                  *
# * Use, duplication or disclosure restricted by GSA ADP Schedule    *
# ********************************************************************

apiVersion: v1
kind: ServiceAccount
metadata:
  name: restricted-db2
---
# Restricted DB2 SCC with linux capabilities
allowHostDirVolumePlugin: false
allowHostIPC: true
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: true
allowPrivilegedContainer: false
allowedCapabilities:
  - "IPC_LOCK"
  - "IPC_OWNER"
apiVersion: security.openshift.io/v1
defaultAddCapabilities: null
fsGroup:
  type: RunAsAny
groups:
- system:authenticated
kind: SecurityContextConstraints
metadata:
  annotations:
    include.release.openshift.io/ibm-cloud-managed: "true"
    include.release.openshift.io/self-managed-high-availability: "true"
    include.release.openshift.io/single-node-developer: "true"
    kubernetes.io/description: restricted denies access to all host features and requires
      pods to be run with a UID, and SELinux context that are allocated to the namespace.  This
      is the most restrictive SCC and it is used by default for authenticated users.
    release.openshift.io/create-only: "true"
  name: restricted-db2
priority: null
readOnlyRootFilesystem: false
requiredDropCapabilities:
- KILL
- MKNOD
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
users: []
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: restricted-db2-scc-role
rules:
  - apiGroups: ["security.openshift.io"]
    resources: ["securitycontextconstraints"]
    resourceNames: ["restricted-db2"]
    verbs: ["use"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: restricted-db2-scc-rolebinding
subjects:
  - kind: ServiceAccount
    name: restricted-db2
roleRef:
  kind: Role
  name: restricted-db2-scc-role
  apiGroup: rbac.authorization.k8s.io
---
# Create Kubernetes Service for communication
apiVersion: v1
kind: Service
metadata:
  name: local-db2
  labels:
    app: local-db2
spec:
  ports:
  - port: 50000
    name: db2-port-1
  - port: 50001
    name: db2-port-2
  selector:
    app: local-db2
---
# Create Statefulset defining Pods
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: local-db2
spec:
  selector:
    matchLabels:
      app: local-db2
  serviceName: local-db2
  replicas: 1
  template:
    metadata:
      labels:
        app: local-db2
    spec:
      serviceAccountName: restricted-db2
      terminationGracePeriodSeconds: 10
      containers:
      - name: database
        resources:
          requests:
            cpu: 500m
            memory: 8192Mi
          limits:
            cpu: 2000m
            memory: 8192Mi
        # DB2 needs two linux capabilities
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
              - IPC_OWNER
        image: DB2IMAGE
        ports:
        - containerPort: 50000
          name: db2-port-1
        - containerPort: 50001
          name: db2-port-2
        readinessProbe:
          tcpSocket:
            port: 50000
          initialDelaySeconds: 15
          periodSeconds: 20
